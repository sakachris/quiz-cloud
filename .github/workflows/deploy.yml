name: Django CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # - name: Set environment variables
      #   run: |
      #     if [ "${{ github.ref_name }}" = "main" ]; then
      #         echo "Setting production environment"
      #         echo DJANGO_ENV=production >> .env
      #         echo DB_HOST=${{ secrets.DB_HOST }} >> .env
      #         echo DB_PORT=${{ secrets.DB_PORT }} >> .env
      #         echo DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }} >> .env
      #         echo DB_NAME=${{ secrets.DB_NAME }} >> .env
      #         echo DB_USER=${{ secrets.DB_USER }} >> .env
      #         echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
      #     elif [ "${{ github.ref_name }}" = "staging" ]; then
      #         echo DJANGO_ENV=staging >> .env
      #         echo DB_HOST=${{ secrets.DB_HOST }} >> .env
      #         echo DB_PORT=${{ secrets.DB_STAGING_PORT }} >> .env
      #         echo DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }} >> .env
      #         echo DB_NAME=${{ secrets.DB_STAGING_NAME }} >> .env
      #         echo DB_USER=${{ secrets.DB_USER }} >> .env
      #         echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
      #     fi

      - name: Build and push Docker images
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
              echo "Building and Pushing Docker Images"
              # docker-compose -f docker-compose.yml -f docker-compose.prod.yml build
              # docker-compose -f docker-compose.yml -f docker-compose.prod.yml push
              docker-compose -f docker-compose.production.yml build
              docker-compose -f docker-compose.production.yml push
          elif [ "${{ github.ref_name }}" = "staging" ]; then
              echo "Building and Pushing Docker Images"
              # docker-compose -f docker-compose.yml -f docker-compose.staging.yml build
              # docker-compose -f docker-compose.yml -f docker-compose.staging.yml push
              docker-compose -f docker-compose.staging.yml build
              docker-compose -f docker-compose.staging.yml push
          fi

      - name: Check Docker Compose version
        run: docker-compose --version

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Deploy to server using SSH
      - name: Deploy, Migrate, and Restart Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            cd /home/saka/quiz-cloud

            if [ "${{ github.ref_name }}" = "main" ]; then
              echo "Actions for Production"
              git checkout ${{ github.ref_name }}
              git pull origin ${{ github.ref_name }}

              # docker-compose -f docker-compose.yml -f docker-compose.prod.yml down

              # docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull

              # docker-compose -f docker-compose.yml -f docker-compose.prod.yml run web python manage.py migrate

              # docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --no-build

              # docker-compose -f docker-compose.yml -f docker-compose.prod.yml exec web python manage.py collectstatic --noinput

              # docker-compose -f docker-compose.yml -f docker-compose.prod.yml restart

              docker-compose -f docker-compose.production.yml down

              docker-compose -f docker-compose.production.yml pull

              docker-compose -f docker-compose.production.yml run web python manage.py migrate

              docker-compose -f docker-compose.production.yml up -d --no-build

              docker-compose -f docker-compose.production.yml exec web python manage.py collectstatic --noinput

              docker-compose -f docker-compose.production.yml restart
            elif [ "${{ github.ref_name }}" = "staging" ]; then
              echo "Actions for Staging"
              git checkout ${{ github.ref_name }}
              git pull origin ${{ github.ref_name }}
              
              # docker-compose -f docker-compose.yml -f docker-compose.staging.yml down

              # docker-compose -f docker-compose.yml -f docker-compose.staging.yml pull

              # docker-compose -f docker-compose.yml -f docker-compose.staging.yml run web python manage.py migrate

              # docker-compose -f docker-compose.yml -f docker-compose.staging.yml up -d --no-build

              # docker-compose -f docker-compose.yml -f docker-compose.staging.yml exec web python manage.py collectstatic --noinput

              # docker-compose -f docker-compose.yml -f docker-compose.staging.yml restart

              docker-compose -f docker-compose.staging.yml down

              docker-compose -f docker-compose.staging.yml pull

              docker-compose -f docker-compose.staging.yml run web python manage.py migrate

              docker-compose -f docker-compose.staging.yml up -d --no-build

              docker-compose -f docker-compose.staging.yml exec web python manage.py collectstatic --noinput

              docker-compose -f docker-compose.staging.yml restart
            fi

            # git pull origin main
            # git checkout ${{ github.ref_name }}
            # git pull origin ${{ github.ref_name }}

            # Stop the running containers
            # docker-compose down

            # Pull the latest image
            # docker-compose pull
         
            # Run migration
            # docker-compose run web python manage.py migrate

            # Start the Docker containers
            # docker-compose -f docker-compose.yml up -d --no-build

            # Collect static files
            # docker-compose exec web python manage.py collectstatic --noinput
            
            # Restart the containers if needed
            # docker-compose -f docker-compose.yml restart